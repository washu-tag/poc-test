# Default values for ct-clip-embeddings.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: local/ct-clip-embeddings-temporal
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

env:
  - name: TEMPORAL_FRONTEND_SERVICE
    value: "temporal-frontend.temporal:7233"
  - name: AWS_ALLOW_HTTP
    value: "true"
  - name: AWS_S3_ALLOW_UNSAFE_RENAME
    value: "true"
  - name: AWS_ENDPOINT_URL
    value: "http://lake-minio.lake:9000"
  - name: AWS_REGION
    value: "us-east-1"
  # Note: The secret minio-credentials must be created in the same namespace as the deployment
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: minio-credentials
        key: aws-access-key-id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: minio-credentials
        key: aws-secret-access-key

workflowWorker:
  command: []
  args: ["run-workflow-worker"]
  replicas: 1
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  volumes: []
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

ctclipWorker:
  command: []
  args: ["run-ct-clip-worker"]
  replicas: 1
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  volumes: []
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
ctclip:
  image:
    repository: local/ct-clip
